-------------------------------------------------------------------------------
solr
1.like模糊查询效率低，单独为关键字建立索引文件，再次搜索时先搜索该索引表，即全文索引
2.(lucene:jar无法单独对外提供服务) solr(检索服务器，基于Java开发，内部封装)
3.solr中自带的war包解压缩到webapps 在web.xml中指明solrhome的位置 多个solrcore配置
  solrconfig.xml:指明solrhome层级 相关jar例如dataimport导入的位置
  使用ikanalyzer中文分词器，在schema.xml中新定义FieldType，还可配置solr存储数据的键field 以及配置dataimport的requestHandler
  data-config.xml:数据库导入数据到solr时列与field的映射配置，以及jdbc连接属性的配置
4.Spring_solrj:配置HttpSolrServer的bean并设置属性注入  SolrInputDocument实例化进行增删改操作
  document .addField("id",8) .deleteById()  httpSolrServer.add(document)  httpSolrServer.commit()
  查询操作：SolrQuery实例化 solrQuery .setQuery() response=httpSolrServer.query(solrQuery) response .getResults()/getBeans(.class)
   solrQuery .addFilterQuery()  .setSort  .setStart() .setRows() .setFields("id","name"):只显示指定属性对应值
   @Field注解同 @Param作用一样，对solr键与属性进行映射
-------------------------------------------------------------------------------
Redis
1.缓存过期策略 FIFO(先进先出，队列) LRU(最近最少使用) LFU(使用次数最少) 持久化方案 rdb(快照存储默认)/aof
2.String(int/double/String):键值对数据存储  set get del incr decr incrby 
  hash:多存储一些配置对象属性值,数据库行记录 hset hget	hgetall hdel(删除单个) del(删除整个) 
  list(链表):lpush lpop(左弹出) rpush rpop lrange(list 0 -1) llen lindex(key 2):获取指定索引元素 lset key index value:设置索引
  set：无序不可重复，sadd smembers sismember scard(集合长度) srem(删除指定元素) 并交补操作  zrank(key ele):获取等级
  zset:有序不可重复，zadd(key 80 ele1 90 ele2) zincrby(key 60 ele):加分给ele  zcard  zrange(按照分数返回区间+withscores) 
  通用 keys *(规则表达式)/ expire(Key有效时间)/ttl:查看剩余有效/persist:持久化该键
3.Redis实现session共享，在tomcat/conf/server.xml中的context标签中指明Redis的配置
4.Java程序操作通过Jedis  直接实例化Jedis 也可以 实例化JedisPool pool.getResource()  .set()/.get()/.mset.. .select(index):按索引查
5.Spring+Redis:构建RedisTemplate的Bean并设置Redis的属性  .opsforValue() opsforList().lpush() ..
6.注解实现,构建缓存管理者即注解支持, @EnableCaching(类上) @Cacheable(value="管理者name",key="xx"):自动将返回值存入缓存,下次优先
   缓存，缓存有则不执行方法体(key的规则语法注意) @CacheEvict():清除缓存，多个键时需要自定义逻辑
7.Key的维护规则，用冒号而不用下划线，使用冒号时有索引，提升效率(user:order)
8.应用场景 String 普通键值对存储  hash:列表存储顺序固定，省份/城市列表、品牌、车系商品清单
   hash 最接近关系型数据库结构，行记录存储，配置对象属性 页面视图所需数据 
   set与list相似 列表 但有不能重复需求
   Zset 与set相似 插入有序 通过优先级score参数排序 有序不重复 热门车系车型列表 时间排序新闻列表 
-------------------------------------------------------------------------------
Memcache
1.存储Value值较小的数据，分布式缓存系统 Client->Proxy->Tomcat(cluster)->Cache/DB
2.Java程序操作 MemcachedClientBuilder.build()  memcachedClient.set(String,int,Object)/.get() 0表示永久存储 
3.get()返回接口泛型 即可以自定义类型  获取一批数据时 可以将键存入list中，然后将list传入.get()方法中返回指定类型
4.对Bean的处理，可以将bean串行化为JSON然后存入(同Redis) 也可以直接存储Bean 但需实现序列化接口
5.区别
 1M将数据全部存在内存之中，服务器关闭时数据将会丢失且不可恢复；而R有部分数据存放在硬盘上，支持aof/rdb两种持久化方案
 2过期策略，M在执行set动作时就指定Key的存活时间；而R通过expire设定
 3M提供了cas命令，可以保证多个并发操作同一份数据的一致性问题；R没有提供cas命令，并不能保证这点，但R提供了事务的功能，
   可以保证一批命令的原子性，中间不会被任何操作打断
 4数据类型，M是Key/Value存储的数据结构，而R支持五种数据类型，可进行更复杂的操作
 5M是多线程的；而R是单线程的，所以M速度要快过R
 6M要存储的数据不能超过1M，只支持缓存一些较小的数据；而R支持大数据的缓存(1GB)
 7M的客户端xmemcache是支持分布式集群的，而R是最近才支持的，还在观望
 8M的分布式存储，key的一致性hash存储规则，优化，节点变更时数据迁移速度大大增加
-------------------------------------------------------------------------------
MongoDB
1.文档型数据库，面向集合存储 即可以存储xml/json和bson等类型的数据
2.show dbs /  use db /show collections /db.createCollection("col") 
  db.collection.insert(json)/.find()/.find().count()/.find().skip()/.find().limit():与skip连用,分页效果/.remove():删除所有
  /.drop()/.update(jsonOld,jsonNew,false,true):更新多个数据 (old,{$set:{data:new}}):更新第一个指定字段，不覆盖
3.Java程序操作 mongoClient实例化 .getDatabase("test")  db.createCollection() .getCollection("col1") 
  col1.find()  document.append(bson)  collection.insertone(document)  .insertMany(documents)
  collection.find().skip().limit().sort()   .find(Filters.lt())  Filters.regex()  deleteOne()/many() updateOne()/Many()
-------------------------------------------------------------------------------


-------------------------------------------------------------------------------